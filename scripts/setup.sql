DROP VIEW IF EXISTS reports_view;

DROP VIEW IF EXISTS proceeds;

DROP TABLE IF EXISTS invoices;

DROP TABLE IF EXISTS reports;

DROP TABLE IF EXISTS sheets;

CREATE TABLE sheets (
  account TEXT NOT NULL,
  address1 TEXT NOT NULL,
  address2 TEXT NOT NULL,
  bank TEXT NOT NULL,
  city TEXT NOT NULL,
  company TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  nip TEXT NOT NULL,
  user_id UUID NOT NULL UNIQUE REFERENCES auth.users on delete cascade
);

CREATE POLICY "Enable access to authors" ON public.sheets FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE TABLE invoices (
  address1 TEXT NOT NULL,
  address2 TEXT NOT NULL,
  company TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  date TIMESTAMP NOT NULL,
  hours BIGINT NOT NULL,
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  nip TEXT NOT NULL,
  price BIGINT NOT NULL,
  sheet_id BIGINT NOT NULL REFERENCES public.sheets on delete cascade,
  title TEXT NOT NULL,
  user_id UUID NOT NULL UNIQUE REFERENCES auth.users on delete cascade
);

CREATE POLICY "Enable access to authors" ON public.invoices FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE TABLE reports (
  accident_premium FLOAT NOT NULL,
  date TIMESTAMP NOT NULL,
  disability_pension FLOAT NOT NULL,
  health_contributions FLOAT NOT NULL,
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  pension_contribution FLOAT NOT NULL,
  sheet_id BIGINT NOT NULL REFERENCES public.sheets on delete cascade,
  sickness_contribution FLOAT NOT NULL,
  user_id UUID NOT NULL UNIQUE REFERENCES auth.users on delete cascade
);

CREATE POLICY "Enable access to authors" ON public.reports FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

create
or replace view proceeds as
select
  reports.id,
  SUM(invoices.price * invoices.hours) :: int as proceeds,
  (
    accident_premium + disability_pension + pension_contribution + sickness_contribution
  ) as pensions_summary
from
  reports
  left join invoices on invoices.date >= reports.date
  and invoices.date < reports.date + interval '1 month'
where
  reports.sheet_id = invoices.sheet_id
group by
  reports.id;

create
or replace view reports_view as
select
  reports.*,
  proceeds.proceeds,
  proceeds.pensions_summary,
  (proceeds - pensions_summary) as base,
  0 as expenses,
  proceeds as income,
  ((proceeds - pensions_summary) * 0.12) as tax,
  (pensions_summary + health_contributions) as social_security2
from
  reports
  left join proceeds on reports.id = proceeds.id;